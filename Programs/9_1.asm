		model	tiny
		.code
		.386
		org	100h
_:		jmp	start

m0		db	'  ',13,10,'$' ;здесь скан код будет
m1		db	'KBD bye!',13,10,'$'

i9:		push	ax  ;поскольку аппартаное прерывание может быть когда угодно, то лучше нам не портить ax
		in	al,60h  ;читаем скан код из буфера клавиатуры
		cmp	al,1    ;проверяем не esc ли нажат
		jne	_1      ;если будет нажат esc, то jump не сработает
		mov	cs:f9,al;и мы запомним, что нажат esc 
_1:		call	prn ;так или инчае печатаем скан код
		pop	ax
		db	0EAh    ;far jmp
v9		dd	0       ;здесь будет адрес оригинального обработчика
f9		db	0       ;если был нажат esc, то здесь единичка будет

prn:		pusha   ;раз вызвалась распечатка, значит оно вызвалось из нашего обработчка int 9, который может быть КОГДА УГОДНО, так что ничего нельзя портить
		push	ds
		push	es
		push	cs
		pop	ds      ;ds и es могут быть какими угодно, так что надо их поправить (но потом обязательно вернуть старые)
		push	cs
		pop	es
		mov	di,offset m0 ;непосредственные дейсвия для печати сканкода
		cld              ;как не понимал почему здесь мы обязательно это пишем, так и не понимаю
		call	h2       ;вызываем преобразователь символа в памяти в его код ASCII
		mov	dx,offset m0 ;печатаем
		mov	ah,9
		int	21h
		pop	es
		pop	ds
		popa
		ret

start:		mov	ax,3509h ;запоминаем адрес исходного обработчика
		int	21h
		mov	word ptr v9,bx
		mov	word ptr v9+2,es

		mov	dx,offset i9 ;ставим свой обработчик
		mov	ax,2509h
		int	21h

_c:		cmp	f9,1         ;пока не нажмется esс программа ждет. (причем во время этого ожидания может быть кучу раз вызван int 9 и в это время он попадет в наш обработчик и мы будем дофига всего печатать)
		jne	_c

		push	ds       ;был нажат esc, возвращаем старый обработчик
		lds	dx,v9
		mov	ax,2509h
		int	21h
		pop	ds

		mov	dx,offset m1 ;прощаемся
		mov	ah,9
		int	21h
		ret

h2:		push	ax ;преобразование символа в памяти в его код ASCII
		shr	al,4
		call	h1
		pop	ax
h1:		push	ax
		and	al,0Fh
		cmp	al,10
		sbb	al,69h
		das
		stosb
		pop	ax
		ret

		end	_
